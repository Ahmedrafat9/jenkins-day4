pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access host's Docker daemon
    }
  }
  environment {
    DOCKER_IMAGE = "ahmedrafat/ultimate-cicd:${BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('dockerhub-creds')
    GIT_REPO_NAME = "jenkins-day4"
    GIT_USER_NAME = "ahmedrafat9"
  }
  stages {
    stage('Checkout') {
      steps {
        // Checkout your source code from GitHub
         sh 'echo passed'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('SonarQubeServerName') {
          sh "mvn clean verify sonar:sonar -Dsonar.projectKey=\$SONAR_PROJECT_KEY"
        }
      }
    }
    stage('Quality Gate') {
      steps {
        script {
          timeout(time: 2, unit: 'MINUTES') {
            def qualityGate = waitForQualityGate()
            if (qualityGate.status != 'OK') {
              error "Pipeline failed due to SonarQube quality gate failure: ${qualityGate.status}"
            }
          }
        }
      }
    }
    stage('Build and Push Docker Image') {
      steps {
        script {
          // Build Docker image
          sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
          def dockerImage = docker.image(DOCKER_IMAGE)
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          script {
            sh '''
              git config user.email "ahmedrafat456@gmail.com"
              git config user.name "Ahmed Rafat"
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
            '''
          }
        }
      }
    }
  }
}
